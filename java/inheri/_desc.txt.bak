상속(inheritance)
 - 다른 클래스로 부터 상속받아 그 클래스의 기능(메소드)과 속성(변수, 상수)을 사용하는 것
	단, 소스의 재활용적인 측면으로만 상속을 사용하면 안됨

 - 자바에서는 단일 상속만을 지원하기 때문에 하나의 클래스에서만 상속을 받을 수 있음(C언어는 다중상속 지원)
	자바에서는 기본적으로 모든 클래스(Object 클래스 제외)가 이미 상속받고 있음

 - 자바에서의 상속은 상위클래스와 동일한 성격을 지닌 클래스로 생성하기 위해 상속을 사용함
	상속을 받은 클래스를 '하위클래스' 또는 '서브(sub)클래스', 상속을 해준 클래스를 '상위클래스' 또는 '슈퍼(super)클래스'라 함

 - 하위클래스의 생성자에서는 반드시 상위클래스의 생성자를 호출해야 하며, 첫줄에 입력해야 함
	생략하면 JVM이 자동으로 인수없는 기본 생성자를 호출함
	super 키워드를 이용하여 상위클래스의 생성자를 호출(매개변수가 있으면 그 값도 넣어줘야 함)

 - private으로 선언된 멤버도 상속은 되지만 직접적인 접근은 불가(protected 메소드를 통해 접근해야 함)

 - static으로 선언된 멤버도 상속되어 하위클래스명으로도 자유롭게 접근이 가능

 - 상위클래스에서 하위클래스로의 접근은 불가

 - 문법
class 하위클래스명 extends 상위클래스명 {
	하위클래스생성자() {
		super();	// 상위클래스의 생성자를 호출하는 것으로 반드시 하위클래스 생성자의 첫줄에 있어야 함
	}
}

상속을 하기 위한 클래스간의 관계
 - 기본적으로 모든 클래스를 상속받을 수 있으나 특정 관게가 성립하는 클래스들끼리 상속을 해야 자바에서의 상속 목적에 맞음\
 - is-a 관계
	'하위클래스 is a 상위클래스'의 관계가 성립되는 클래스들을 의미
	즉, 하위클래스가 상위클래스의 일종으로 사용될 경우를 의미
 - has-a 관게
	'하위클래스 has a 상위클래스'의 관계가 성립되는 클래스들을 의미
	하위클래스가 상위클래스를 소유하고 있는 경우를 의미
	단, 소유하지 않는 경우가 있을 경우 상속은 다시 생각해봐야 함(예외적인 상황이 있을 경우 상속을 받지 않는 것이 좋음)
	만약 소유하지 않는 경우가 있는데도 상속을 하면 소유하지 않는 인스턴스는 표현이 안됨
	소유하지 않는 경우가 있는 has-a 관계는 상속이 아닌 복합 방식으로 처리해야 함