오버로딩(Overloading)
 - 한 클래스 내에서 동일한 이름의 메소드를 여럿 정의하는 것
 	메소드 호출시 각 메소드별로 구분이 가능하면 동일한 이름으로 메소드들을 정의할 수 있음
 - 메소드의 매개변수의 자료형이나 개수가 다르면 같은 이름으로 정의해도 됨
	예) test(), test(10), test(10.2), test(10, 2)....
	단, 리턴타입이 다른 걸로는 오버로딩이 안됨
 - 생성자도 오버로딩이 가능함 : 

this 명령
 - 현재 생성되고 있는 인스턴스를 의미하는 키워드
 - this.변수명 : 해당 변수는

문자열(String)
 - 여러 문자들을 의미하는 자료형으로 자바에서는 String 클래스의 인스턴스로 표현됨
	그러므로 자바에서의 문자열은 String클래스의 인스턴스로 처리되며 String 클래스의 멤버(변수, 상수, 매소드)들을 사용할 수 있음
 - String클래스는 java.lang 패키지에 들어있으며, java.lang 패키지는 따로 import를 하지 않아도 사용 가능
 - 문법
String str = new String("문자열");	-> 정상적인 방법이나 사용하기 번거로워 실제로는 거의 사용하지 않음
String str = "문자열";	-> 인스턴스이지만 변수처럼 생성할 수 있으며 문자열 클래스에서만 제공되는 방법
 - 생성자
String(String original) : 지정한 문자열(original)을 String 인스턴스로 생성하나 보통 직접 문자열을 넣어줌
String(StringBuffer buffer) : 지정한 StringBuffer 객체를 String 인스턴스로 생성하여 리턴
String(StringBuilder builder) : 지정한 StringBuilder 객체를 String 인스턴스로 생성하여 리턴

 - 주요 메소드 : 원본 문자열을 변경하는 메소드는 없음
리턴타입	메소드명 및 설명
char	charAt(int index) : 문자열에서 지정한 인덱스에 해당하는 문자를 추출하여 리턴
int		compareTo(String anotherString) : 문자열과 지정한 다른 문자열이 같은지를 리턴(대소문자 구분하여 같으면 0)
int		compareToIgnoreCase(String str) : 문자열과 지정한 다른 문자열이 같은지를 리턴(대소문자 구분없이 같으면 0)
 - compareTo~ 를 사용해서 리턴값이 음수이면 원본이 비교대상보다 사전적으로 앞에 있고, 양수면 뒤에 있다는 의미
String	concat(String str) : 문자열의 뒤에 지정한 문자열 str을 붙여서 새로운 문자열로 리턴
boolean	endsWith(String suffix) : 문자열의 끝부분이 지정한 suffix와 같은지 여부를 리턴
boolean	equals(Object anObject) : 문자열과 지정한 문자열이 같은지를 리턴(대소문자 구분하여 같으면 true)
boolean	equalsIgnoreCase(String anotherString) : 문자열과 지정한 문자열이 같은지를 리턴(대소문자 구분없이 같으면 true)

indexOf() : 문자열에서 지정한 문자(열)의 위치(인덱스)를 찾아 리턴하는 메소드로 못 찾으면 -1을 리턴
int		indexOf(int ch) : 문자열에서 지정한 문자(ch)의 위치 인덱스를 리턴
int		indexOf(int ch, int fromIndex) : 지정한 문자(ch)를 fromIndex부터 찾아 리턴
int		indexOf(String str) : 문자열에서 지정한 문자열(str)의 위치 인덱스를 리턴
int		indexOf(String str, int fromIndex) : 지정한 문자열(str)을 fromIndex부터 찾아 리턴

lastIndexOf() : indexOf()와 비슷하나 찾는 방향을 문자열의 끝에서 부터 찾기 시작
int		lastIndexOf(int ch) : 문자열의 끝에서 부터 지정한 문자(ch)의 위치를 리턴
int		lastIndexOf(int ch, int fromIndex) : 지정한 문자(ch)의 위치를 fromIndex부터 반대로 찾아 리턴
int		lastIndexOf(String str) : 문자열의 끝에서 부터 지정한 문자열(str)의 위치를 리턴
int		lastIndexOf(String str, int fromIndex) : 지정한 문자열(str)의 위치를 fromIndex부터 반대로 찾아 리턴

boolean	isEmpty() : 문자열이 비어 있는지 여부를 리턴(빈 문자열 여부)
int		length() : 문자열의 길이로 글자 개수를 리턴(문자열의 마지막 인덱스 + 1의 값과 같음 - 0부터 시작하니까)

String	replace(char oldChar, char newChar) : 문자열에서 oldChar를 찾아 newChar로 변경 후 새 문자열로 리턴
String	replaceAll(String regex, String replacement) : regex를 찾아 replacement로 변경 후 새 문자열로 리턴

String[] split(String regex) : 문자열을 regex를 구분자로 하여 자른 후 문자열 배열로 리턴
boolean	startsWith(String prefix) : 문자열의 시작부분이 지정한 prefix와 같은지 여부를 리턴
String	substring(int beginIndex) : 문자열의 beginIndex 부터 끝까지 잘라내어 새 문자열로 리턴
String	substring(int beginIndex, int endIndex) : beginIndex 부터 endIndex - 1 까지 잘라내어 새 문자열로 리턴

String	toLowerCase() : 문자열의 모든 영문 대문자를 소문자로 변환하여 새 문자열로 리턴
String	toUpperCase() : 문자열의 모든 영문 소문자를 대문자로 변환하여 새 문자열로 리턴
String	trim() : 문자열의 양끝에 있는 공백을 제거한 후 새 문자열로 리턴(사용자가 입력하는 모든 데이터에서 사용)

String	static valueOf(모든 종류의 데이터) : 지정한 데이터를 문자열로 형변환하여 리턴
 - static이므로 인스턴스 생성없이 String.valueof(데이터)로 사용할 수 있음
 - 보통 문자열로 변환힐 때에는 데이터 + ""으로 간편하게 빈 문자열을 더하는 식으로 사용하는 경우가 더 많음
 	단, 메모리 관리에 민감한 프로그램 작업시에는 valueof()  메소드를 사용하는 것이 좋다.
ex) <int i = 23> 을 문자열로 바꾸고 싶으면
	String s1 = i + "";			혹은
	String s2 = String.valueof();

StringBuffer & StringBuilder 클래스
 - 문자열 변경을 위한 클래스들로 쓰레드 사용여부에 따라 선택해서 사용하면 됨
 	문자열 변경 순서 : String 인스턴스를 StringBuilder형 인스턴스로 생성 -> 문자열 변경 -> 다시 String 인스턴스로 생성
 - 두 클래스는 메소드까지 동일하여 둘 중 아무 클래스나 사용해도 됨
	StringBuffer : jdk1.0에서 추가. 쓰레드 셰이프(thread safe)하여 쓰레드 사용시 사용됨
	StringBuilder : jdk1.5에서 추가. 쓰레드에서는 불안정하나 StringBuffer보다 빠름